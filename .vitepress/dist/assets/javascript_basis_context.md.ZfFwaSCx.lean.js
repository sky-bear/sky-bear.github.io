/* empty css                                                                     */import{c as a,a2 as i,o as n}from"./chunks/framework.BAVNBlau.js";const k=JSON.parse('{"title":"执行上下文","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/basis/context.md","filePath":"javascript/basis/context.md"}'),l={name:"javascript/basis/context.md"},c=Object.assign(l,{setup(p){return(e,s)=>(n(),a("div",null,s[0]||(s[0]=[i(`<h1 id="执行上下文" tabindex="-1">执行上下文 <a class="header-anchor" href="#执行上下文" aria-label="Permalink to &quot;执行上下文&quot;">​</a></h1><h2 id="基础" tabindex="-1">基础 <a class="header-anchor" href="#基础" aria-label="Permalink to &quot;基础&quot;">​</a></h2><blockquote><p>每次当控制器转到 ECMAScript 可执行代码的时候，即会进入到一个执行上下文。 执行上下文(简称-EC)是一个抽象概念，ECMA-262 标准用这个概念同可执行代码(executable code)概念进行区分。 标准规范没有从技术实现的角度准确定义 EC 的类型和结构;这应该是具体实现 ECMAScript 引擎时要考虑的问题。 活动的执行上下文在逻辑上组成一个堆栈。堆栈底部永远都是全局上下文(global context)，堆栈顶部是当前(活动的)执行上下文。堆栈在 EC 类型的变量(various kingds of EC)被推入或弹出的同时被修改</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>每个执行上下文中都有三个重要属性</p><ul><li>变量对象(Variable object, 缩写为 VO)</li><li>作用域链(Scope chain)</li><li>this</li></ul></div></blockquote><h2 id="可执行代码" tabindex="-1">可执行代码 <a class="header-anchor" href="#可执行代码" aria-label="Permalink to &quot;可执行代码&quot;">​</a></h2><ul><li>全局代码(global context)</li><li>函数代码</li><li>eval 代码:eval 函数被调用的时候产生的上下文</li></ul><h2 id="数据声明" tabindex="-1">数据声明 <a class="header-anchor" href="#数据声明" aria-label="Permalink to &quot;数据声明&quot;">​</a></h2><p>如果变量与执行上下文相关，那么它自己应该知道它的数据存储在哪里和如何访问。这种机制被称作 变量对象(variable object). 变量对象 (缩写为 VO)就是与执行上下文相关的对象</p><ul><li>变量 (var, VariableDeclaration);</li><li>函数声明 (FunctionDeclaration, 缩写为 FD);</li><li>以及函数的形参</li></ul><h2 id="不同执行上下文中的变量对象" tabindex="-1"><a href="https://www.cnblogs.com/justinw/archive/2010/04/23/1718733.html#variable-object-in-different-execution-contexts" target="_blank" rel="noreferrer">不同执行上下文中的变量对象</a> <a class="header-anchor" href="#不同执行上下文中的变量对象" aria-label="Permalink to &quot;[不同执行上下文中的变量对象](https://www.cnblogs.com/justinw/archive/2010/04/23/1718733.html#variable-object-in-different-execution-contexts)&quot;">​</a></h2><ul><li><p>全局上下文的变量对象就是全局对象</p><p>全局对象(Global object) 是在进入任何执行上下文之前就已经创建的对象；这个对象只存在一份，它的属性在程序中任何地方都可以访问，全局对象的生命周期终止于程序退出那一刻</p></li><li><p>函数上下文的变量对象</p><p>在函数执行上下文中，VO 是不能直接访问的，此时由激活对象(activation object,缩写为 AO)扮演 VO 的角色。激活对象 是在进入函数上下文时刻被创建的，它通过函数的 arguments 属性初始化。grguments 属性的值是 Arguments object：</p><p>Arguments objects 是函数上下文里的激活对象中的内部对象，它包括下列属性：</p><ul><li>callee — 指向当前函数的引用</li><li>length — 真正传递的参数的个数；</li><li>properties-indexes (字符串类型的整数) 属性的值就是函数的参数值(按参数列表从左到右排列)。 properties-indexes 内部元素的个数等于 arguments.length. properties-indexes 的值和实际传递进来的参数之间是共享的</li></ul></li></ul><h2 id="分阶段处理上下文代码" tabindex="-1"><a href="https://www.cnblogs.com/justinw/archive/2010/04/23/1718733.html#phases-of-processing-the-context-code" target="_blank" rel="noreferrer">分阶段处理上下文代码</a> <a class="header-anchor" href="#分阶段处理上下文代码" aria-label="Permalink to &quot;[分阶段处理上下文代码](https://www.cnblogs.com/justinw/archive/2010/04/23/1718733.html#phases-of-processing-the-context-code)&quot;">​</a></h2><p>执行上下文的代码被分成两个基本的阶段来处理：</p><ul><li><p>进入执行上下文 当进入执行上下文(代码执行之前)时，VO 已被下列属性填充满(这些都已经在前文描述过)：</p><ul><li><p>函数的所有形式参数(如果我们是在函数执行上下文中) 变量对象的一个属性，这个属性由一个形式参数的名称和值组成；如果没有对应传递实际参数，那么这个属性就由形式参数的名称和 undefined 值组成；</p></li><li><p>所有函数声明(FunctionDeclaration, FD) —变量对象的一个属性，这个属性由一个函数对象(function-object)的名称和值组成；如果变量对象已经存在相同名称的属性，则完全替换这个属性。</p></li><li><p><strong>所有变量声明(var, VariableDeclaration)</strong> —变量对象的一个属性，这个属性由变量名称和 undefined 值组成；如果变量名称跟已经声明的形式参数或函数相同，则变量声明不会干扰已经存在的这类属性</p></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 执行前</span></span>
<span class="line"><span>AO(test) = {</span></span>
<span class="line"><span>  arguments：{</span></span>
<span class="line"><span>      callee：test,</span></span>
<span class="line"><span>      length：2,</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  a: 10,</span></span>
<span class="line"><span>  b: undefined,</span></span>
<span class="line"><span>  c: undefined,</span></span>
<span class="line"><span>  d: &lt;reference to FunctionDeclaration &quot;d&quot;&gt;</span></span>
<span class="line"><span>  e: undefined</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span>// 执行</span></span>
<span class="line"><span>AO(test) = {</span></span>
<span class="line"><span>  arguments：{</span></span>
<span class="line"><span>      callee：test,</span></span>
<span class="line"><span>      length：2,</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  a: 10,</span></span>
<span class="line"><span>  b: undefined,</span></span>
<span class="line"><span>  c: 10,</span></span>
<span class="line"><span>  d: &lt;reference to FunctionDeclaration &quot;d&quot;&gt;</span></span>
<span class="line"><span>  e:  &lt;reference to FunctionDeclaration &quot;_e&quot;&gt;</span></span>
<span class="line"><span>};</span></span></code></pre></div></li><li><p>执行代码 执行代码之前 AO/VO 已经被属性</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// function</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x);</span></span></code></pre></div></li></ul><h2 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h2><blockquote><p>任何时候，变量只能通过使用关键字才能声明。</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// undefined</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;b&quot; is not defined</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>a 是使用 var 声明的， 所以进入执行上下文时，a 已经被声明， VO 中的 a 是 undefined, 但是没有 b, 所以报<code>&quot;b&quot; is not defined</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fn1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//  a is not defined</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>解释, 执行 console.log(a)时</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>AO(fn1) = {</span></span>
<span class="line"><span>    arguments：{</span></span>
<span class="line"><span>        callee：fn1,</span></span>
<span class="line"><span>        length：0,</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>}</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fn2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fn3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>解释</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>AO(fn1) = {</span></span>
<span class="line"><span>    arguments：{</span></span>
<span class="line"><span>        callee：fn1,</span></span>
<span class="line"><span>        length：0,</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>globalVO = {</span></span>
<span class="line"><span>    a: 2</span></span>
<span class="line"><span>    fn2 : &lt;reference to FunctionDeclaration &quot;fn2&quot;&gt;</span></span>
<span class="line"><span>    fn3 : &lt;reference to FunctionDeclaration &quot;fn3&quot;&gt;</span></span>
<span class="line"><span>}</span></span></code></pre></div>`,23)])))}});export{k as __pageData,c as default};
